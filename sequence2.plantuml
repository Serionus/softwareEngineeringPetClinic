@startuml Sequence2 Make An Appointment

actor Owner
participant LoginService
participant OwnerService
database OwnerRepository

participant PetService
database PetRepository

participant VisitService
database VisitRepository


Owner -> LoginService : login(credentials) 
LoginService -> OwnerService : login(credentials)

loop    
    OwnerService -> OwnerRepository : searchForOwner(id)
end

alt no such owner
    OwnerRepository -> LoginService: noSuchOwner()
    Owner <- LoginService : AccountDoesntExistException()
end

OwnerService -> OwnerRepository : getOwner(owner)
OwnerRepository -> OwnerService : returnOwner()

OwnerService -> PetService : getPet(id)

note right
w sytuacji braku zwierząt 
nie można umówić wizyty
end note

alt no pets
    OwnerService -> Owner : backToOwnerManagement()
end

loop
    PetService -> PetRepository : searchForPet(id)
end

PetRepository -> PetService : returnPet()
PetService -> OwnerService : getPet(id)


OwnerService -> VisitService : createVisit(Pet, Vet)

note over VisitRepository
nie można wybrać 
uprzednio zajętego terminu
end note
alt visit already booked
    OwnerService -> Owner : backToOwnerManagement()
end

VisitService -> VisitRepository : addVisit(Visit)
OwnerService -> Owner : backToOwnerManagement()

@enduml